// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KaBaseDefine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KaBaseDefine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KaBaseDefine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KaBaseDefine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KaBaseDefine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace IMBase {
class ChatMessage;
class ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace IMBase
PROTOBUF_NAMESPACE_OPEN
template<> ::IMBase::ChatMessage* Arena::CreateMaybeMessage<::IMBase::ChatMessage>(Arena*);
template<> ::IMBase::UserInfo* Arena::CreateMaybeMessage<::IMBase::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IMBase {

// ===================================================================

class UserInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IMBase.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IMBase.UserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_nick_name = 3;
  void clear_user_nick_name();
  static const int kUserNickNameFieldNumber = 3;
  const std::string& user_nick_name() const;
  void set_user_nick_name(const std::string& value);
  void set_user_nick_name(std::string&& value);
  void set_user_nick_name(const char* value);
  void set_user_nick_name(const char* value, size_t size);
  std::string* mutable_user_nick_name();
  std::string* release_user_nick_name();
  void set_allocated_user_nick_name(std::string* user_nick_name);

  // string passwd = 4;
  void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  const std::string& passwd() const;
  void set_passwd(const std::string& value);
  void set_passwd(std::string&& value);
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  std::string* mutable_passwd();
  std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 user_gender = 2;
  void clear_user_gender();
  static const int kUserGenderFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_gender() const;
  void set_user_gender(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:IMBase.UserInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_gender_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KaBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IMBase.ChatMessage) */ {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ChatMessage* other);
  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const final {
    return CreateMaybeMessage<ChatMessage>(nullptr);
  }

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IMBase.ChatMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string chatData = 3;
  void clear_chatdata();
  static const int kChatDataFieldNumber = 3;
  const std::string& chatdata() const;
  void set_chatdata(const std::string& value);
  void set_chatdata(std::string&& value);
  void set_chatdata(const char* value);
  void set_chatdata(const char* value, size_t size);
  std::string* mutable_chatdata();
  std::string* release_chatdata();
  void set_allocated_chatdata(std::string* chatdata);

  // uint32 sendId = 1;
  void clear_sendid();
  static const int kSendIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 sendid() const;
  void set_sendid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 targetId = 2;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:IMBase.ChatMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatdata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sendid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 targetid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KaBaseDefine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// uint32 user_id = 1;
inline void UserInfo::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:IMBase.UserInfo.user_id)
  return user_id_;
}
inline void UserInfo::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IMBase.UserInfo.user_id)
}

// uint32 user_gender = 2;
inline void UserInfo::clear_user_gender() {
  user_gender_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::user_gender() const {
  // @@protoc_insertion_point(field_get:IMBase.UserInfo.user_gender)
  return user_gender_;
}
inline void UserInfo::set_user_gender(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_gender_ = value;
  // @@protoc_insertion_point(field_set:IMBase.UserInfo.user_gender)
}

// string user_nick_name = 3;
inline void UserInfo::clear_user_nick_name() {
  user_nick_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfo::user_nick_name() const {
  // @@protoc_insertion_point(field_get:IMBase.UserInfo.user_nick_name)
  return user_nick_name_.GetNoArena();
}
inline void UserInfo::set_user_nick_name(const std::string& value) {
  
  user_nick_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMBase.UserInfo.user_nick_name)
}
inline void UserInfo::set_user_nick_name(std::string&& value) {
  
  user_nick_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IMBase.UserInfo.user_nick_name)
}
inline void UserInfo::set_user_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_nick_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMBase.UserInfo.user_nick_name)
}
inline void UserInfo::set_user_nick_name(const char* value, size_t size) {
  
  user_nick_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMBase.UserInfo.user_nick_name)
}
inline std::string* UserInfo::mutable_user_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:IMBase.UserInfo.user_nick_name)
  return user_nick_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_user_nick_name() {
  // @@protoc_insertion_point(field_release:IMBase.UserInfo.user_nick_name)
  
  return user_nick_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_user_nick_name(std::string* user_nick_name) {
  if (user_nick_name != nullptr) {
    
  } else {
    
  }
  user_nick_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_nick_name);
  // @@protoc_insertion_point(field_set_allocated:IMBase.UserInfo.user_nick_name)
}

// string passwd = 4;
inline void UserInfo::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserInfo::passwd() const {
  // @@protoc_insertion_point(field_get:IMBase.UserInfo.passwd)
  return passwd_.GetNoArena();
}
inline void UserInfo::set_passwd(const std::string& value) {
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMBase.UserInfo.passwd)
}
inline void UserInfo::set_passwd(std::string&& value) {
  
  passwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IMBase.UserInfo.passwd)
}
inline void UserInfo::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMBase.UserInfo.passwd)
}
inline void UserInfo::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMBase.UserInfo.passwd)
}
inline std::string* UserInfo::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:IMBase.UserInfo.passwd)
  return passwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserInfo::release_passwd() {
  // @@protoc_insertion_point(field_release:IMBase.UserInfo.passwd)
  
  return passwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:IMBase.UserInfo.passwd)
}

// uint32 status = 5;
inline void UserInfo::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::status() const {
  // @@protoc_insertion_point(field_get:IMBase.UserInfo.status)
  return status_;
}
inline void UserInfo::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:IMBase.UserInfo.status)
}

// -------------------------------------------------------------------

// ChatMessage

// uint32 sendId = 1;
inline void ChatMessage::clear_sendid() {
  sendid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatMessage::sendid() const {
  // @@protoc_insertion_point(field_get:IMBase.ChatMessage.sendId)
  return sendid_;
}
inline void ChatMessage::set_sendid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sendid_ = value;
  // @@protoc_insertion_point(field_set:IMBase.ChatMessage.sendId)
}

// uint32 targetId = 2;
inline void ChatMessage::clear_targetid() {
  targetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChatMessage::targetid() const {
  // @@protoc_insertion_point(field_get:IMBase.ChatMessage.targetId)
  return targetid_;
}
inline void ChatMessage::set_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:IMBase.ChatMessage.targetId)
}

// string chatData = 3;
inline void ChatMessage::clear_chatdata() {
  chatdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatMessage::chatdata() const {
  // @@protoc_insertion_point(field_get:IMBase.ChatMessage.chatData)
  return chatdata_.GetNoArena();
}
inline void ChatMessage::set_chatdata(const std::string& value) {
  
  chatdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMBase.ChatMessage.chatData)
}
inline void ChatMessage::set_chatdata(std::string&& value) {
  
  chatdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IMBase.ChatMessage.chatData)
}
inline void ChatMessage::set_chatdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chatdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMBase.ChatMessage.chatData)
}
inline void ChatMessage::set_chatdata(const char* value, size_t size) {
  
  chatdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMBase.ChatMessage.chatData)
}
inline std::string* ChatMessage::mutable_chatdata() {
  
  // @@protoc_insertion_point(field_mutable:IMBase.ChatMessage.chatData)
  return chatdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatMessage::release_chatdata() {
  // @@protoc_insertion_point(field_release:IMBase.ChatMessage.chatData)
  
  return chatdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_chatdata(std::string* chatdata) {
  if (chatdata != nullptr) {
    
  } else {
    
  }
  chatdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatdata);
  // @@protoc_insertion_point(field_set_allocated:IMBase.ChatMessage.chatData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IMBase

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KaBaseDefine_2eproto
